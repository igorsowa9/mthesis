function varargout = wvfcalcvalues(varargin)
% calculates here defined values from .wvf and .hdr file
% or gives out the header if input argument is 'header'.
%
% The channels should have these assignments:
%
% Ch1: uL1
% Ch2: iL1
% Ch3: uL2
% Ch4: iL2
% Ch5: uL3
% Ch6: iL3
% Ch7: uDC
% Ch8: iDC
% 
% If this is not the case, one has to change the assignments in this
% function and maybe the calculations too.

if strcmp(varargin{1}, 'header')
   % create header if input is 'header'
    header = {          % make header cell and values matrix consistent!
        'datetimenum' ...
        'eta' ...
        'PAC' ...
        'PDC' ...
        'Q1' ...
        'Q' ...
        'S' ...
        'S1' ...
        'cosphi' ...
        'PF' ...
        'UL1rms' ...
        'UL2rms' ...
        'UL3rms' ...
        'IL1rms' ...
        'IL2rms' ...
        'IL3rms' ...
        'UDC' ...
        'IDC' ...
        'THDuL1' ...
        'THDuL2' ...
        'THDuL3' ...
        'THDiL1' ...
        'THDiL2' ...
        'THDiL3' ...
        'HARM2uL1%' ...
        'HARM3uL1%' ...
        'HARM4uL1%' ...
        'HARM5uL1%' ...
        'HARM6uL1%' ...
        'HARM7uL1%' ...
        'HARM8uL1%' ...
        'HARM9uL1%' ...
        'HARM10uL1%' ...
        'HARM11uL1%' ...
        'HARM12uL1%' ...
        'HARM13uL1%' ...
        'HARM14uL1%' ...
        'HARM15uL1%' ...
        'HARM16uL1%' ...
        'HARM17uL1%' ...
        'HARM18uL1%' ...
        'HARM19uL1%' ...
        'HARM20uL1%' ...
        'HARM2iL1%' ...
        'HARM3iL1%' ...
        'HARM4iL1%' ...
        'HARM5iL1%' ...
        'HARM6iL1%' ...
        'HARM7iL1%' ...
        'HARM8iL1%' ...
        'HARM9iL1%' ...
        'HARM10iL1%' ...
        'HARM11iL1%' ...
        'HARM12iL1%' ...
        'HARM13iL1%' ...
        'HARM14iL1%' ...
        'HARM15iL1%' ...
        'HARM16iL1%' ...
        'HARM17iL1%' ...
        'HARM18iL1%' ...
        'HARM19iL1%' ...
        'HARM20iL1%' ...
        'HARM2uL2%' ...
        'HARM3uL2%' ...
        'HARM4uL2%' ...
        'HARM5uL2%' ...
        'HARM6uL2%' ...
        'HARM7uL2%' ...
        'HARM8uL2%' ...
        'HARM9uL2%' ...
        'HARM10uL2%' ...
        'HARM11uL2%' ...
        'HARM12uL2%' ...
        'HARM13uL2%' ...
        'HARM14uL2%' ...
        'HARM15uL2%' ...
        'HARM16uL2%' ...
        'HARM17uL2%' ...
        'HARM18uL2%' ...
        'HARM19uL2%' ...
        'HARM20uL2%' ...
        'HARM2iL2%' ...
        'HARM3iL2%' ...
        'HARM4iL2%' ...
        'HARM5iL2%' ...
        'HARM6iL2%' ...
        'HARM7iL2%' ...
        'HARM8iL2%' ...
        'HARM9iL2%' ...
        'HARM10iL2%' ...
        'HARM11iL2%' ...
        'HARM12iL2%' ...
        'HARM13iL2%' ...
        'HARM14iL2%' ...
        'HARM15iL2%' ...
        'HARM16iL2%' ...
        'HARM17iL2%' ...
        'HARM18iL2%' ...
        'HARM19iL2%' ...
        'HARM20iL2%' ...
        'HARM2uL3%' ...
        'HARM3uL3%' ...
        'HARM4uL3%' ...
        'HARM5uL3%' ...
        'HARM6uL3%' ...
        'HARM7uL3%' ...
        'HARM8uL3%' ...
        'HARM9uL3%' ...
        'HARM10uL3%' ...
        'HARM11uL3%' ...
        'HARM12uL3%' ...
        'HARM13uL3%' ...
        'HARM14uL3%' ...
        'HARM15uL3%' ...
        'HARM16uL3%' ...
        'HARM17uL3%' ...
        'HARM18uL3%' ...
        'HARM19uL3%' ...
        'HARM20uL3%' ...
        'HARM2iL3%' ...
        'HARM3iL3%' ...
        'HARM4iL3%' ...
        'HARM5iL3%' ...
        'HARM6iL3%' ...
        'HARM7iL3%' ...
        'HARM8iL3%' ...
        'HARM9iL3%' ...
        'HARM10iL3%' ...
        'HARM11iL3%' ...
        'HARM12iL3%' ...
        'HARM13iL3%' ...
        'HARM14iL3%' ...
        'HARM15iL3%' ...
        'HARM16iL3%' ...
        'HARM17iL3%' ...
        'HARM18iL3%' ...
        'HARM19iL3%' ...
        'HARM20iL3%' ...        
        'uDCripple' ...
        'iDCripple' ...
        'Plosses' ...
        };
    varargout{1} = header;

else
    
    % reading .wvf and .hdr
    filename = varargin{1};
    uL{1} = wvfread(filename, 1, 1);
    iL{1} = wvfread(filename, 1, 2);
    uL{2} = wvfread(filename, 1, 3);
    iL{2} = wvfread(filename, 1, 4);
    uL{3} = wvfread(filename, 2, 1);
    iL{3} = wvfread(filename, 2, 2);
    uDC = wvfread(filename, 2, 3);
    iDC = wvfread(filename, 2, 4);

    info = hdrread(filename);
    datetimenum = datenum([info.Group1.Trace1.Date{1,1}, ' ' info.Group1.Trace1.Time{1,1}]);
    Fs = 1/info.Group1.Trace1.HResolution; % sample frequency
    
    % scaling correction
    uL{3} = 2*uL{3};
    uDC = 2*uDC;
    
    %%%%%%%%%%%%%%%%
    % CALCULATIONS %
    %%%%%%%%%%%%%%%%
    
    % initialize L1,L2,L3 values
    UrmsL = zeros(1,3);
    IrmsL = UrmsL;
    PL = UrmsL;
    HARMuL = cell(1,3);
    HARMiL = HARMuL;
    FFTuL = HARMuL;
    FFTiL = HARMuL;
    THDuL = UrmsL;
    THDiL = UrmsL;
    phiL = UrmsL;
    p = UrmsL;
    SL = UrmsL;
    QL = UrmsL;
    S1L = UrmsL;
    Q1L = UrmsL;
    
    % loop for L1, L2, L3 values
    for i=1:3
        UrmsL(i)=rms(uL{i});
        IrmsL(i)=rms(iL{i});
        PL(i) = mean(uL{i}.*iL{i});
        FFTuL{i} = dftgeneral(uL{i}(1:0.2*Fs),Fs);
        HARMuL{i} = harm50(FFTuL{i});
        FFTiL{i} = dftgeneral(iL{i}(1:0.2*Fs),Fs);
        HARMiL{i} = harm50(FFTiL{i});
        THDuL(i) = sqrt(sumsqr(HARMuL{i}(3,2:50)));
        THDiL(i) = sqrt(sumsqr(HARMiL{i}(3,2:50)));
        phiL(i) = FFTuL{i}(3,11) - FFTiL{i}(3,11);
        p(i) = sign(phiL(i));
        S1L(i) = UrmsL(i)*HARMiL{i}(2,1);
        SL(i) = UrmsL(i)*IrmsL(i);
        if abs(phiL(i))>180, p(i)=p(i)*(-1); end
        Q1L(i) = p(i)*sqrt(S1L(i)^2-PL(i)^2);
        QL(i) = p(i)*sqrt(SL(i)^2-PL(i)^2);
        if imag(Q1L(i))~=0, Q1L(i)=0; end
        if imag(QL(i))~=0, QL(i)=0; end
    end
    
    UDCav = mean(uDC);
    IDCav = mean(iDC);
    
    PDC = mean(uDC.*iDC);
    PAC = sum(PL);
    Plosses = abs(PAC-PDC);
    eta = PDC/PAC*100;
    if eta > 100, eta = PAC/PDC*100; end

    Q1 = sum(Q1L);
    Q = sum(QL);
    S1 = sum(S1L);
    S = sum(SL);
    cosphi = abs(PAC/S1);
    if cosphi>1, cosphi = 1; end
    PF = abs(PAC/S);
    if PF>1, PF = 1; end
    
    uDCripple = max(uDC)-min(uDC);
    iDCripple = max(iDC)-min(iDC);
    
    % alternative ripple definition:
%    uDCripple = rms(uDC-UDCav)/abs(UDCav)*100;
%    iDCripple = rms(iDC-IDCav)/abs(IDCav)*100;

    % creating output matrix
    values = [
        datetimenum ...
        eta ...
        PAC ...
        PDC ...
        Q1 ...
        Q ...
        S ...
        S1 ...
        cosphi ...
        PF ...
        UrmsL(1) ...
        UrmsL(2) ...
        UrmsL(3) ...
        IrmsL(1) ...
        IrmsL(2) ...
        IrmsL(3) ...
        UDCav ...
        IDCav ...
        THDuL(1:3) ...
        THDiL(1:3) ...
        HARMuL{1}(3,2:20) ...
        HARMiL{1}(3,2:20) ...
        HARMuL{2}(3,2:20) ...
        HARMiL{2}(3,2:20) ...
        HARMuL{3}(3,2:20) ...
        HARMiL{3}(3,2:20) ...
        uDCripple ...
        iDCripple ...
        Plosses ...
        ];
    varargout{1} = values;
end
end

